//Create a public mapping balances that associates the key type address with the value type uint.
//Change the functions get and remove to work with the mapping balances.
//Change the function set to create a new entry to the balances mapping, where the key is the address of the parameter and the value is the balance associated with the address of the parameter.
pragma solidity >=0.8.2 <0.9.0;
contract  Mapping {
    mapping(address=>uint) public myapp;
     
     function get(address _addr) public view returns(uint){
     return myapp[_addr];
     }

     function set(address _addr , uint _i) public{
          myapp[_addr]  = _i;
     }
      function remove(address _addr) public {
          delete myapp[_addr];
      } 

}
contract NestedMapping{
    mapping (address => mapping(uint=>bool)) public nested;
    function get(address _addr1,uint _i) public view returns(bool){
        return nested[_addr1][_i];
        
    }
    function set (address _addr1,uint _i,bool _boo) public{
        nested[_addr1][_i] = _boo;
    }
    function remove(address _addr1,uint _i)public{
        delete nested[_addr1][_i];
    }
}

